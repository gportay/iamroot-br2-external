################################################################################
#
# skeleton-alpine-make-rootfs
#
################################################################################

SKELETON_ALPINE_MAKE_ROOTFS_INSTALL_STAGING = YES

SKELETON_ALPINE_MAKE_ROOTFS_DEPENDENCIES = host-alpine-make-rootfs host-apk-tools host-ca-certificates host-iamroot

ifeq ($(BR2_PACKAGE_HOST_ALPINE_KEYS),y)
SKELETON_ALPINE_MAKE_ROOTFS_DEPENDENCIES = host-alpine-keys
endif

ifeq ($(BR2_arm)$(BR2_ARM_CPU_HAS_FPU),yy)
SKELETON_ALPINE_MAKE_ROOTFS_ARCH = armhf
endif # BR2_arm BR2_ARM_CPU_HAS_FPU

ifeq ($(BR2_ARM_CPU_ARMV7A),y)
SKELETON_ALPINE_MAKE_ROOTFS_ARCH = armv7
endif # BR2_ARM_CPU_ARMV7A

ifeq ($(BR2_aarch64),y)
SKELETON_ALPINE_MAKE_ROOTFS_ARCH = aarch64
endif # BR2_aarch64

ifeq ($(BR2_powerpc64le),y)
SKELETON_ALPINE_MAKE_ROOTFS_ARCH = ppc64le
endif # BR2_powerpc64le

ifeq ($(BR2_s390x),y)
SKELETON_ALPINE_MAKE_ROOTFS_ARCH = s390x
endif # BR2_s390x

ifeq ($(BR2_i386),y)
SKELETON_ALPINE_MAKE_ROOTFS_ARCH = x86
endif # BR2_i386

ifeq ($(BR2_x86_64),y)
SKELETON_ALPINE_MAKE_ROOTFS_ARCH = x86_64
endif # BR2_x86_64

SKELETON_ALPINE_MAKE_ROOTFS_PACKAGES = $(call qstrip,$(BR2_PACKAGE_SKELETON_ALPINE_MAKE_ROOTFS_PACKAGES))
ifeq ($(SKELETON_ALPINE_MAKE_ROOTFS_PACKAGES),)
SKELETON_ALPINE_MAKE_ROOTFS_PACKAGES =
endif

SKELETON_ALPINE_MAKE_ROOTFS_REPOSITORIES = $(call qstrip,$(BR2_PACKAGE_SKELETON_ALPINE_MAKE_ROOTFS_REPOSITORIES))
ifeq ($(SKELETON_ALPINE_MAKE_ROOTFS_REPOSITORIES),)
SKELETON_ALPINE_MAKE_ROOTFS_REPOSITORIES =
endif

SKELETON_ALPINE_MAKE_ROOTFS_MIRROR = $(call qstrip,$(BR2_PACKAGE_SKELETON_ALPINE_MAKE_ROOTFS_MIRROR))
ifeq ($(SKELETON_ALPINE_MAKE_ROOTFS_MIRROR),)
SKELETON_ALPINE_MAKE_ROOTFS_MIRROR =
endif

ifeq ($(BR2_PACKAGE_SKELETON_ALPINE_MAKE_ROOTFS_3_9_BRANCH),y)
SKELETON_ALPINE_MAKE_ROOTFS_BRANCH = 3.9
endif
ifeq ($(BR2_PACKAGE_SKELETON_ALPINE_MAKE_ROOTFS_3_10_BRANCH),y)
SKELETON_ALPINE_MAKE_ROOTFS_BRANCH = 3.10
endif
ifeq ($(BR2_PACKAGE_SKELETON_ALPINE_MAKE_ROOTFS_3_11_BRANCH),y)
SKELETON_ALPINE_MAKE_ROOTFS_BRANCH = 3.11
endif
ifeq ($(BR2_PACKAGE_SKELETON_ALPINE_MAKE_ROOTFS_3_12_BRANCH),y)
SKELETON_ALPINE_MAKE_ROOTFS_BRANCH = 3.12
endif
ifeq ($(BR2_PACKAGE_SKELETON_ALPINE_MAKE_ROOTFS_3_13_BRANCH),y)
SKELETON_ALPINE_MAKE_ROOTFS_BRANCH = 3.13
endif
ifeq ($(BR2_PACKAGE_SKELETON_ALPINE_MAKE_ROOTFS_3_14_BRANCH),y)
SKELETON_ALPINE_MAKE_ROOTFS_BRANCH = 3.14
endif
ifeq ($(BR2_PACKAGE_SKELETON_ALPINE_MAKE_ROOTFS_3_15_BRANCH),y)
SKELETON_ALPINE_MAKE_ROOTFS_BRANCH = 3.15
endif
ifeq ($(BR2_PACKAGE_SKELETON_ALPINE_MAKE_ROOTFS_3_16_BRANCH),y)
SKELETON_ALPINE_MAKE_ROOTFS_BRANCH = 3.16
endif
ifeq ($(BR2_PACKAGE_SKELETON_ALPINE_MAKE_ROOTFS_3_17_BRANCH),y)
SKELETON_ALPINE_MAKE_ROOTFS_BRANCH = 3.17
endif
ifeq ($(BR2_PACKAGE_SKELETON_ALPINE_MAKE_ROOTFS_3_18_BRANCH),y)
SKELETON_ALPINE_MAKE_ROOTFS_BRANCH = 3.18
endif
ifeq ($(BR2_PACKAGE_SKELETON_ALPINE_MAKE_ROOTFS_3_19_BRANCH),y)
SKELETON_ALPINE_MAKE_ROOTFS_BRANCH = 3.19
endif
ifeq ($(BR2_PACKAGE_SKELETON_ALPINE_MAKE_ROOTFS_LATEST_STABLE_BRANCH),y)
SKELETON_ALPINE_MAKE_ROOTFS_BRANCH = latest-stable
endif
ifeq ($(BR2_PACKAGE_SKELETON_ALPINE_MAKE_ROOTFS_EDGE_BRANCH),y)
SKELETON_ALPINE_MAKE_ROOTFS_BRANCH = edge
endif
ifeq ($(BR2_PACKAGE_SKELETON_ALPINE_MAKE_ROOTFS_CUSTOM_BRANCH),y)
SKELETON_ALPINE_MAKE_ROOTFS_BRANCH = $(call qstrip,$(BR2_PACKAGE_SKELETON_ALPINE_MAKE_ROOTFS_CUSTOM_BRANCH_NAME))
$(error No branch name set. Check your BR2_PACKAGE_SKELETON_ALPINE_MAKE_ROOTFS_BRANCH_NAME setting)
endif

define SKELETON_ALPINE_MAKE_ROOTFS_BUILD_CMDS
	rm -Rf $(@D)/rootfs/
	mkdir -p $(@D)/rootfs/
	for i in $(SKELETON_ALPINE_MAKE_ROOTFS_REPOSITORIES); do \
		echo $(SKELETON_ALPINE_MAKE_ROOTFS_MIRROR)/$(SKELETON_ALPINE_MAKE_ROOTFS_BRANCH)/$$i; \
	done >$(@D)/repositories
	( cd $(@D) && PATH=$(BR_PATH) APK_OPTS="--arch $(SKELETON_ALPINE_MAKE_ROOTFS_ARCH)" ido --preserve-env=APK_OPTS alpine-make-rootfs --packages "$(SKELETON_ALPINE_MAKE_ROOTFS_PACKAGES)" --repositories-file $(@D)/repositories --keys-dir $(HOST_DIR)/etc/apk/keys $(@D)/rootfs )
endef

define SKELETON_ALPINE_MAKE_ROOTFS_INSTALL_TARGET_CMDS
	$(call SYSTEM_RSYNC,$(@D)/rootfs,$(TARGET_DIR))
endef

# For the staging dir, we install nothing, but we need the /lib and /usr/lib
# appropriately setup.
define SKELETON_PACSTRAP_INSTALL_STAGING_CMDS
	$(call SYSTEM_BIN_SBIN_LIB_DIRS,$(STAGING_DIR))
	$(call SYSTEM_USR_SYMLINKS_OR_DIRS,$(STAGING_DIR))
	$(call SYSTEM_LIB_SYMLINK,$(STAGING_DIR))
endef

$(eval $(generic-package))
